.\"                                      Hey, EMACS: -*- nroff -*-
.\" -------------------------------------------------------------------------
.\" Multi Operating System (mOS)
.\" Copyright (c) 2015-2017, Intel Corporation.
.\"
.\" This program is free software; you can redistribute it and/or modify it
.\" under the terms and conditions of the GNU General Public License,
.\" version 2, as published by the Free Software Foundation.
.\"
.\" This program is distributed in the hope it will be useful, but WITHOUT
.\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
.\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
.\" more details.
.\" -------------------------------------------------------------------------
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.\" Please adjust this date whenever revising the manpage.
.TH YOD 1 "July 7, 2017"
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
yod \- Reserve mOS LWK resources and launch a single process
.SH SYNOPSIS
.B yod [options] command {arguments}
.SH DESCRIPTION

\fByod\fP is the fundamental job launch mechanism for Multi-OS (mOS).  It
reserves mOS Light Weight Kernel (LWK) resources and then launches the
specified \fBcommand\fP.  Yod reserves LWK CPUs, GPU devices, and memory.
Resources reserved by yod are owned by the launched process for its duration.

.SH OPTIONS

.TP
.B --resources, -R <\fIfraction\fP, all, MPI, file:\fImap_file\fP>
Reserves a portion of the LWK resources.  If specified as a fraction, then
the corresponding number of LWK cores and GPU devices are reserved, as well as
an equal portion of the designated LWK memory.  A \fIfraction\fP may be
specified in floating point format or as a rational number M/N, where M and N
are integers.  Fractions must be in the interval (0, 1].  If \fBMPI\fP is
specified, then MPI environment variables are used to determine the fractional
amount of resources.  If file:\fImap_file\fP is specified, then a mapping file
is used to specify LWK CPU and/or memory and/or number of utility threads per
MPI rank. See \fIRESOURCE MAP FILES\fP for details.  This option may not be
combined with any of the --cpu, --cores, --gpus or --mem options.

.PP
The following options control the overall reservation of LWK CPUs.  At
most one of these options should be specified.  If none is specified and
--resources/-R is not specified, yod will reserve all available LWK CPUs.
If one of these options is specified, then memory must also be specified
(see --mem/-M below).  The assignment of reserved LWK CPUs to
actual CPUs is controlled by the \fB--resource_algorithm\fP option; see
\FIRESOURCE ALGORITHMS\fP for details.

.TP
.B --cpus, -c <\fIlist\fP, \fImask\fP, all>
Reserves the specified CPUs for the \fIcommand\fP being launched.  If
\fBall\fP is specified, all available LWK CPUs are reserved.  Otherwise,
the argument describes a list of LWK CPU to be reserved and is in either
list or mask format.

.TP
.B --cores, -C <\fInumber\fP, \fIfraction\fP, all, MPI>
Reserves the specified LWK cores for the \fIcommand\fP being launched.
If \fBall\fP is specified, all available LWK cores are reserved.  Otherwise,
the argument specifies either a \fInumber\fP of cores to be reserved, or a
\fIfraction\fP of the overall LWK cores designated for mOS use.  A
\fIfraction\fP may be specified in floating point format or as a rational
number M/N, where M and N are integers.  Fractions must be in the interval
(0, 1].  If \fBMPI\fP is specified, then MPI environment variables are used to
determine the fractional amount of core resources.

.PP
The following options control reservation of LWK memory.  If specified,
then LWK CPUs must also be specified via either the --cpus or the --cores
option.
.TP
.B --mem, -M <\fIsize\fP, \fIfraction\fP, all, MPI>
Reserve the specified amount of memory for the \fIcommand\fP being launched.
\fISize\fP is an integer or decimal number, optionally augmented with K, M or
G to indicate units of kilobytes, megabytes or gigabytes, respectively.
A \fIfraction\fP reserves memory as a portion of the overall amount of
memory designated for LWK use.  Fractions must be in the interval (0.0, 1.0)
and may be specified either in floating point format or as a rational number
M/N, where M and N are integers (M <= N). If \fBall\fP is specified, then all
available LWK memory is reserved.  If \fBMPI\fP is specified, then MPI environment
variables are used to determine the fractional amount of memory resources.

.PP
The following options control the reservation of GPU devices. If these options
are not specified and if the ZE_AFFINITY_MASK environment variable is set, the
ZE_AFFINITY_MASK will control the available GPU devices. If neither of these
options nor the --resources/-R option is specified and the ZE_AFFINITY_MASK is
not set, yod will reserve all available GPU devices.

.TP
.B --gpus, -G <\fInumber\fP, \fIfraction\fP, all>
Reserves the specified number of GPU devices for the \fIcommand\fP being
launched. If \fBall\fP is specified, all available GPU devices are reserved.
Otherwise, the argument specifies either a \fInumber\fP of GPU devices to be
reserved, or a \fIfraction\fP of the total GPU devices available for mOS use.
A \fIfraction\fP may be specified in floating point format or as a rational
number M/N, where M and N are integers.  Fractions must be in the interval
(0, 1].  If \fBMPI\fP is specified, then MPI environment variables are used to
determine the fractional amount of GPU resources.  If this option is specified,
then LWK CPUs must also be specified via either the --cpus or the --cores option
along with memory. This option and the --gpu-tiles option are mutually exclusive.

.TP
.B --gpu-tiles, -g <\fInumber\fP, \fIfraction\fP, all>
Reserves the specified number of GPU tiles for the \fIcommand\fP being
launched. If \fBall\fP is specified, all available GPU tiles are reserved.
Otherwise, the argument specifies either a \fInumber\fP of GPU tiles to be
reserved, or a \fIfraction\fP of the total GPU tiles available for mOS use.
A \fIfraction\fP may be specified in floating point format or as a rational
number M/N, where M and N are integers.  Fractions must be in the interval
(0, 1].  If \fBMPI\fP is specified, then MPI environment variables are used to
determine the fractional amount of GPU resources.  If this option is specified,
then LWK CPUs must also be specified via either the --cpus or the --cores option
along with memory. This option and the --gpus option are mutually exclusive.

.PP
Other options:

.TP
.B --util_threads, -u <\fInumber\fP>
Specify \fInumber\fP of threads to be identified as utility threads within
the process being launched. If a value is specified, the kernel will
heuristically identify that number of threads as utility threads and
provide special placement and behaviors to those threads. If no value
is specified, the kernel will make no heuristic identification of utility
threads. If the number of utility threads is specified in -R file:map_file
option then that value overrides the value specified here.

.TP
.B --resource_algorithm <numa, simple, random>
Controls the selection and layout of CPUs relative to the overall set of
designated LWK CPUs.  See \fIRESOURCE ALGORITHMS\fP for additional information.
The default is \fBnuma\fP.

.TP
.B --mem_algorithm <\fIalgorithm\fP>
This option is not yet implemented.

.TP
.B --memory-preference, -p <\fIpreference\fP>
States preferences of types of memory to use for various kinds of allocations.
See \fIMEMORY PREFERENCES\fP for additional information.
.TP
.B --layout <\fIdescription\fP>
Provides CPU (hardware thread) ordering suggestions to the mOS scheduler.  See
\fITHREAD LAYOUT\fP for additional information.
.TP
.B --rank-layout <compact, scatter[:stride], disabled>
Provides a hint to lay out ranks in a prescribed order.  A compact layout will place
adjacent ranks near each other, from a NUMA perspective.  A scatter layout will
interleave ranks using a stride; if not specified, the stride will be the number of
NUMA domains for CPUs.  Disabling the layout will not prescribe any specific layout
of the ranks with respect to NUMA domains.  This option is a hint and requires additional
support from the underlying MPI launch mechanism.
.TP
.B --brk-clear-length \fIsize\fP
For non-negative \fIsize\fP values, \fIsize\fP defines the number of bytes to clear
(zero) at the beginning of the expanded region when the brk system call expands
the data segment.  For negative \fIsize\fP values, the entire expanded region will
be cleared.  The default behavior is to clear 4K.  The \fIsize\fP argument may be
specified in integer or symbolic format (4K, 2M, 1G, etc.).
.TP
.B --mosview <lwk, all>
Sets the mOS view of process being launched.  If \fBlwk\fP is specified, the
process will see only LWK global resources but not Linux resources.  If \fBall\fP
is specified, the process will see both LWK and Linux resources.  The default is
\fBall\fP.
.TP
.B --maxpage \fIscope:maxpage\fP
Sets the largest page size that can be used for a virtual memory region.
\fIscope\fP can be \fBdbss\fP for .data/.bss area, \fBheap\fP for brk area,
\fBanon_private\fP for private anonymous area, \fBtstack\fP for thread stacks,
\fBstack\fP for process stack or \fBall\fP for all LWK memory backed areas.
\fImaxpage\fP can be either \fB4k, 2m,\fP or \fB1g\fP. Setting for multiple virtual
memory regions can be specified by using separator \fI'/'\fP between settings of each
virtual memory region. One can specify a different \fImaxpage\fP for each region.
If setting for a virtual memory region is not specified, then by default the largest
page size supported by the hardware is used for that region, unless interleaving
is active. If interleaving is active, then the default maximum page size is 2m.

.TP
.B --pagefault \fIscope:level\fP
Sets the page faulting level that can be used for a virtual memory region.
\fIscope\fP can be \fBdbss\fP for .data/.bss area, \fBheap\fP for brk area,
\fBanon_private\fP for private anonymous area, \fBtstack\fP for thread stacks,
\fBstack\fP for process stack or \fBall\fP for all LWK memory backed areas.
\fIlevel\fP can be either \fBnofault\fP or \fBonefault\fP. Setting for multiple virtual
memory regions can be specified by using separator \fI'/'\fP between settings of each
virtual memory region. One can specify a different \fIlevel\fP for each region.
If setting for a virtual memory region is not specified, then a default setting of
nofault is applied.

.TP
.B --mempolicy \fIscope:type\fP
Sets the memory policy type that can be used for a virtual memory region.
\fIscope\fP can be \fBdbss\fP for .data/.bss area, \fBheap\fP for brk area,
\fBanon_private\fP for private anonymous area, \fBtstack\fP for thread stacks,
\fBstack\fP for process stack or \fBall\fP for all LWK memory backed areas.
\fItype\fP can be either \fBnormal\fP, \fBrandom\fP, \fBinterleave\fP, or
\fBinterleave_random\fP. Setting for multiple virtual memory regions can be specified
by using separator \fI'/'\fP between settings of each virtual memory region.
One can specify a different \fItype\fP for each region. If setting for a virtual
memory region is not specified, then a default setting of \fB'interleave'\fP is applied
if there is more than 1 NUMA domain reserved for a memory type otherwise
the default setting is \fB'normal'\fP

.TP
.B --memtype-ratio \fIscope:ratio\fP
Sets the ratio of page allocations across types of memory.  In certain
application environments, higher overall bandwith than what would be achievable
by using high bandwidth memory (HBM) alone may be possible when both HBM and DDR
data paths are utilized in parallel. Use with the \fBinterleave\fP mempolicy.
The granularity of the memory type interleaving can be controlled using the
\fB--maxpage\fP option to limit the maximum page size. By default, the order
of memory type allocations are hbm, ddr, followed by nvram. This ratio will be
applied to the first two available memory types. For example, a value
of 2 would allocate 2 pages of high bandwidth memory for every 1 page of ddr
memory. If the \fB--memory-preferences\fP option is used to change the order of memory
types, the targeted memory types for applying the ratio will change. \fIscope\fP
can be \fBdbss\fP for .data/.bss area, \fBheap\fP for brk area, \fBanon_private\fP
for private anonymous area, \fBtstack\fP for thread stacks, \fBstack\fP for
process stack or \fBall\fP for all LWK memory backed areas.

.TP
.B --dry-run
Do not actually reserve resources and launch.

.TP
.B --verbose, -v <\fInumber\fP>
Controls the verbosity of \fByod\fP.  \fINumber\fP is an integer between 0
and 9.  Note that the argument is required.

.TP
.B --option, -o \fIname[=value]\fP
Passes the option to the mOS kernel.  The supported options are not documented
here and in general, should be considered experimental.
.TP
.B --help, -h
Prints a terse version of this documentation.

.SH CPU MASKS AND LISTS
.PP
CPUs in yod are numbered in C fashion.  That is, the first logical CPU is
CPU 0.  The second is CPU 1.  And so on.
.PP
CPU masks in yod are hexadecimal literals specified in little endian order.
That is, the least significant bit corresponds to CPU 0, and so on.  Masks
must begin with either "0x" or "0X".
.PP
CPU lists are CPU numbers or ranges of numbers separated by commas.
.PP
So, for example, the list '0-2,8' is equivalent to mask 0x107.

.SH RESOURCE ALGORITHMS

The \fB--cpus\fP form of LWK CPU reservation is explicit
in that it specifically identifies the CPUs to be reserved.

.PP
Other forms are less explicit and in these cases, \fByod\fP uses the
\fB--resource_algorithm\fP specification to reserve and select CPUs
and memory.

.PP
The \fBnuma\fP resource algorithm attempts to reserve LWK cores and
memory that are near each other in the NUMA sense.

.PP
The \fBsimple\fP resource algorithm reserves LWK cores from the available
pool in ascending order. Memory is reserved from NUMA domains in ascending
order.

.PP
The \fBrandom\fP CPU algorithm reserves LWK cores randomly from the
available pool.

.SH THREAD LAYOUT

The \fB--layout <description>\fP option may be used to suggest how software
threads are assigned to CPUs (hardware threads) once specific CPUs have been
reserved for the process being launched.  The \fBdescription\fP argument may be
specified as \fBscatter\fP, \fBcompact\fP, or a permutation of the
dimensions \fBnode\fP, \fBtile\fP, \fBcore\fP and \fBcpu\fP.

.PP
The \fBscatter\fP option spreads threads out as much as possible within the
selected LWK CPUs.  It is equivalent to \fBnode,tile,core,cpu\fP and thus
will attempt to spread out across nodes before repeating tiles, spread out
across tiles before repeating cores, and so on.  This is the default.

.PP
The \fBcompact\fP option is the opposite of scatter and is equivalent
to \fBcpu,core,tile,node\fP.  It will select CPUs (hardware threads) on a core
before moving to another core.  Likewise, it will use all cores on a tile
before expanding to another tile.  And so on.  Note, however, that compact
may not tightly pack cores if there is sufficient room; see below.

.PP
Other permutations of \fBnode, tile, core and cpu\fP may be passed to
specify the sort order of the CPUs.

.PP
The \fBnode, tile, core and cpu\fP terms may also be augmented with a
\fB:<count>\fP suffix which will prefer the number of the described
entities.  For example, \fBcpu:1\fP will construct a layout that uses
the first CPU in all reserved cores before using the 2nd and subsequent
CPUs in any reserved core.  And so \fBcpu:1,core,tile,node\fP is compact
from a node, tile and core perspective, but will initially consume one
CPU per each reserved core before scheduling work on the remaining CPUs
of the reserved cores.

.SH MEMORY PREFERENCES

Preferences have the form \fBscope[:size]:order\fP.  The \fBscope\fP term
identifies a virtual memory region and can be \fBdbss\fP for .data/.bss area,
\fBheap\fP for brk area, \fBanon_private\fP for private anonymous area,
\fBtstack\fP for thread stacks, \fBstack\fP for process stack or \fBall\fP
for all LWK memory backed areas.

.PP
The \fBorder\fP term lists types of memory in order of preference.  This is
a comma delimited list of \fBhbm, dram,\fP and \fBnvram\fP.  The default
ordering is hbm, dram, nvram.  If not all types of memory are explicitly
stated, the list is implicitly completed with missing types from this
default order.

.PP
The size term, if present, applies the preference to allocations larger than
or equal to the specified size.  If not specified, size is implicitly 1.

.PP
Multiple preferences are separated with a '/' character.

.PP
If no preference is specified, the default behavior all:1:hbm,dram,nvram.
Any preferences specified are relative to this default and are applied
in order from left to right.

.PP
See \fIEXAMPLES\fP below.

.SH  RESOURCE MAP FILES

The \fIfile:\fP variant of the \fI--resources\fP option may be used to map
CPU, memory and number of utility threads per MPI rank. The file contains lines of the form:

.TP
.B <local-rank> <resource-spec>...
.PP
where <local-rank> is either an integer identifying the Nth rank on the node or
the wildcard character * and <resource-spec> is one of the CPUs, cores,
memory, number of utility threads or resources option.  The wildcard line is
optional, matches all ranks and should be last in the file.  Comments are
allowed and start with the # character.

.PP
This option requires that the MPI_LOCALRANKID environment be set to identify
the rank's ordinal within the node.
.PP
Here is an example:

.RS 2
.TP
# The first rank on the node will use 1/4 of the designated resources:
.TP
0 -R 1/4
.TP
# The second rank on the node will use CPU 9 and 1 gigabyte of memory:
.TP
1 -c 9 -M 1G
.TP
# All other ranks use 1 core and 1/8 of the designated memory:
.TP
* --cores 1 --mem 1/8
.TP
# First rank uses CPU 1,49 and 1G of LWKMEM and has 2 utility threads and second rank uses CPU 2,50 and 1G of LWKMEM and has 1 utility threads:
.TP
0 -c 1,49 -M 1G -u 2
.RS 0
1 -c 2,50 -M 1G -u 1
.RE

.RE


.SH EXAMPLES

.TP
.B yod foo bar
Launches \fBfoo\fP as an mOS process.  All available LWK CPUs and memory will
be reserved.

.TP
.B yod --cores 0.5 foo bar
Reserves half of the overall cores and memory designated for LWK usage.

.TP
.B yod --cpus 48-71 --util_threads 1 --mem 1.1G foo bar
Reserves LWK CPUs 48-71 and 1.1 gigabytes of LWK memory.  The first thread
created in the process will be treated by the kernel as a utility thread.

.TP
.B yod -c 48-71 -u 0 -M 0.75 foo bar
Reserves LWK CPUs 48-71 and 75% of the designated LWK memory.

.TP
.B yod -p all:dram foo
Gives precedence to DRAM for all memory allocations.

.TP
.B yod -p anon_private:dram/anon_private:65536:hbm
Gives precedence to DRAM for private, anonymous mmaps of less than 64K and
also gives precedence to HBM for private, anonymous mmaps of 64K or larger.

.TP
.B yod -p all:dram/anon_private:65536:hbm
Gives precedence to DRAM for all memory allocations, except private, anonymous
mmaps of 64K or larger.

.TP
.B yod --maxpage heap:2m/anon_private:1g
Set largest page size that can be used for heap to 2m and that of private
anonymous maps to 1g

.TP
.B yod --pagefault heap:nofault/anon_private:onefault
Pagefaults are disabled for heap area and a single page fault is used per
mmaped virtual memory area to allocate and map all pages of that area.

.TP
.B yod --mempolicy all:interleave
Memory policy of all VMRs are set to interleave.

.SH ENVIRONMENT VARIABLES

.PP
.B YOD_VERBOSE may be used to control the verbosity.  Specifying
\fB--verbose=\fP on the command line takes precedence over this environment
variable.

.SH ERRORS

.PP
It is an error to attempt to reserve a CPU that is
not designated as an mOS CPU.  \fBYod\fP will exit with -EINVAL in this
case.

.PP
It is an error to attempt to reserve a CPU that is
already reserved by an existing mOS process. \fBYod\fP will exit with
-EBUSY in this case.

.SH BUGS
.PP
The \fB--cpu_algorithm random\fP option is not yet implemented.
.PP
The \fB--mem\fP option is not yet supported.

.SH SEE ALSO
.I taskset(1),
.br

.SH AUTHORS
yod was written by Rolf Riesen and Tom Musta.

.SH COPYRIGHT
Copyright \(co 2015 Intel Corp.
